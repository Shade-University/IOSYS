Procesy – Přepínání kontextu (proc_ctxSw)
Otazka: Kolik procent času CPU je promrháno během 50 ms, pokud context-switch zabere 2 ms a
časové kvantum bude 11 ms a právě bylo přepnuto na proces:

Postup:
1. spočítáme si kolikrát ve sledovaném čase (50 ms) byl součet časové kvantum (11ms)
+ context-switch (2ms) -> (11 + 2) + (11 + 2) + (11 + 2) -> 3x
2. context-switch (2ms) * počet výskytů (3 * 2) -> 6 ms
3. čas promrhaný všemi context-switchi za sledovaný čas vydělíme sledovaným časem 6
/ 50 * 100 = 12%


Procesy – Využití procesoru (proc_CPUutil)
Otázka: Počítač má paměť pro současný běh 3 procesů. Tyto procesy čekají průměrně třetinu času
na dokončení V/V operace. Kolik průměrně času je procesor (CPU) nevyužit?

Postup:
1. jak dlouho čekají (1/3) umocníme počtem procesů (1/3)*(1/3)*(1/3) nebo (1/3)^3 =
1/27
2. nesčítá se to protože procesy běží současně(paralelně) a ne za sebou(seriově)


Souborové systémy (FS)
Dávat si pozor:
jestli jde o B nebo o KB
sektor má 512 B, pokud není dáno jinak.
Otázka: Kolik procent místa je přibližně promrháno, pokud se na souborový systém s alokačním
blokem 4 sektory uloží 3 soubory o velikostech 104 kB, 194 B a 310 B?

Postup:
alokační blok (4 sektory) * standardní velikost sektoru (512 B) = 2048 B = 2 kB
všechny velikosti souborů vydělíme velikostí alokačního bloku (2 kB)
104 / 2 = 52 bloků
194 B = 0,194 / 2 = 0,097 (zaokrouhlíme na 1 blok) -> mrháme
310 B = 0,310 kB / 2 = 0,155 (zaokrouhlíme na 1 blok) -> mrháme
u 1. souboru je použito celých 52 bloků beze zbytku a nemrháme
u 2. souboru je použit 1 blok a mrháme (1 * 2 - 0,194 = 1,806 kB) // 1*2 = blok *velikost alokačního bloku
u 3. souboru je použit 1 blok a mrháme (1 * 2 - 0,310 = 1,69 kB)
celkově použitá paměť 2 kB * 54 bloků = 108 kB
celkově promrháno (1,806 + 1,69) = 3,496
procent promrháno: (100* 3,496)/108 = 3.237037 => zaokrouhleno na 4%



Souborové systémy – FAT (velikost souborového systému)
Otázka: Při velikosti clusteru (alokační jednotky) 8 sektorů je maximální velikost filesystému
FAT12:

Postup:
umocníme 2 na FAT-číslo -> 2^12 = 4096 adres bloků
počet sektorů alokační jednotky (bloku nebo clusteru) * standardní velikost sektoru -> 8 sektorů * 512 B = 4096 B = 4 kB
počet adres * velikost alokačního bloku -> 4096 * 4 kB = 16384 kB = 16 MB



Souborové systémy – FAT (velikost tabulky)
Otázka: Jaká bude velikost tabulky FAT12 při velikosti clusteru (alokační jednotky) 32 sektorů a
velikosti souborového systému 180 MB:

Postup:
1. velikost FS v kB = 180 * 1024 = 184320 kB
2. velikost alokačního bloku (clusteru nebo jednotky) = počet sektorů * velikost
jednoho sektoru = 32 * 512 B = 16384 B = 16 kB
3. počet adres = velikost FS / velikost al. bloku = 11520 adres
!!!!!!!!!!!!!!!. jelikož FAT12 může mít pouze 2^12 = 4096 adres není toto možné!!! (11520 >
4096)
4. velikost tabulky = velikost jedné adresy * počet adres = (16(fat číslo) / 8(bitů na
Bajt)) * 15360 = 30720 B = 30 kB


Správa paměti

Dávat si pozor na:
nezapomenout odčítat
best-fit jede vždycky od začátku a přidá tam, kde toho nejméně zbyde
(Exact-or) Worst fit (Buď stejný a nebo nejvíc volný blok)
Když má blok velikost 0 tak vypadne a na jeho pozici se dostane následující

Správa paměti – Převod adres (mem_addrConv)

Pozor na:
pořadí záznamu - pokud nám vyjde 0x1 -> 2 záznam, 0x0 -> 1. záznam atd.
4 bity jsou použity na jednu hodnotu v HEX soustavě (F = 1111)

Na segmenty (virtuální - sčítání)
Otázka: Pokud proces je rozdělen na 3 segmenty, offset v adrese je 16bitový a segmentová tabulka
obsahuje (mj.) polozky:
base        limit
0x014DB     0x00FFFF
0xD5348     0x7FFFFF
0x1AC01     0x0FFFFF
Lineární adresa proměnné s virtuální (logickou) adresou (v procesu) 0x12012 je:

Postup:
1. 16bitu = 2^4 bitu => offset jsou 4 hodnoty
2. 0x12012, takze po utrzeni offsetu(2012) zůstává 0x1 to znamená 2.pozice v
tabulce což je 0xD5348 0x7FFFFF
3. k záznamu 0xD5348 se přičte offset D5348 + 2012 = D735A
4. takže 0xD735A je spravna odpoved

Na stránky (lineární - přidává se na konec)
Otázka: Pokud proces je rozdělen na 5 stránek velikosti 4 kB a stránková tabulka obsahuje (mj.)
položky:
frame
0x303C
0x1583
0x1ABC
0xABC5
0x5B06
Fyzická adresa proměnné s lineární (logickou) adresou (v procesu) 0x4ABC je:


Postup:
1. 4 kB = 4096 B = 2^12
2. 12/4 = 3 znaky je offset (ABC) a 0x4 je řídící bit -> pátý frame (0x5B06)
3. přípíšeme offset nakonec frame => 0x5B06ABC